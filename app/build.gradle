apply plugin: 'com.android.application'
apply plugin: 'android-aspectjx'
import org.aspectj.tools.ajc.Main
android {
    compileSdkVersion 26
    buildToolsVersion "27.0.0"
    defaultConfig {
        applicationId "com.epsit.demoaspectj"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'org.aspectj:aspectjrt:1.8.9'
    testCompile 'junit:junit:4.12'
}
project.android.applicationVariants.all { variant ->
    org.gradle.api.tasks.compile.JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = [
                //使用java7
                 "-1.7",
                //aspectJ处理的源文件
                 "-inpath", javaCompile.destinationDir.toString(),
                //aspectJ编译器的classpath
                 "-aspectpath", javaCompile.classpath.asPath,
                //输出目录，aspectJ处理完成后的输出目录
                 "-d", javaCompile.destinationDir.toString(),
                //java程序的类查找路径
                 "-classpath", javaCompile.classpath.asPath,
                //覆盖引导类的位置，android中使用android jar而不是jdk
                 "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        new Main().runMain(args,false)
    }

}